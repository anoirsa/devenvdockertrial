import React, { useCallback, useState } from 'react';
import logo from './logo.svg';
import './App.css';
import Cookies from 'universal-cookie';
import Todos from './components/todo/Todos';

function App() {
  const [count, setCount] = useState<number>(0);
  const [todos, setTodos] = useState<string[]>([]);

  const increment = () : void => {
    setCount((c) => c + 1);
  };
  const addTodo = () : void => {
    setTodos((t) => [...t, "New Todo"]);
  };

  const addTodoCallback = useCallback (() => {
    console.log("Fucntion called")
    setTodos((t) => [...t, "New Todo"]);
  },[todos])

  return (
    <>
    <Todos todos={todos} addTodo={addTodoCallback} />
    <hr />
    <div>
      Count: {count}
      <button onClick={() =>  setTodos((t) => [...t, "New Todo"])}>+</button>
    </div>
  </>
  );
}

export default App;

--------------------


import React, { ClassAttributes, DetailedHTMLProps, HTMLInputTypeAttribute, InputHTMLAttributes, LegacyRef, MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';

import Todos from './components/todo/Todos';

function App() {
  const [name, setName] = useState<string>('')
  const inputRef = useRef<HTMLElement>();
 // inputRef.current?.onFocus
  return (
    <>
      <input ref={inputRef as LegacyRef<HTMLInputElement>} value={name}  type="text" onChange={e => setName(e.target.value)} />
      <div>My name is {name}</div>
      <button
        onClick={() => {
          inputRef.current?.focus()
        }}
      >
        Focus
      </button>
    </>
  );
}

export default App;
------
